/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as GamesRouteRouteImport } from './routes/games/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as TopicsSportsRouteImport } from './routes/topics/sports'
import { Route as TopicsColoursRouteImport } from './routes/topics/colours'
import { Route as ListsVerbsRouteImport } from './routes/lists/verbs'
import { Route as ListsCasesRouteImport } from './routes/lists/cases'
import { Route as GamesSportsRouteImport } from './routes/games/sports'
import { Route as GamesNumbersRouteImport } from './routes/games/numbers'
import { Route as GamesColoursRouteImport } from './routes/games/colours'
import { Route as GamesAdjectivesRouteImport } from './routes/games/adjectives'

const GamesRouteRoute = GamesRouteRouteImport.update({
  id: '/games',
  path: '/games',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const TopicsSportsRoute = TopicsSportsRouteImport.update({
  id: '/topics/sports',
  path: '/topics/sports',
  getParentRoute: () => rootRouteImport,
} as any)
const TopicsColoursRoute = TopicsColoursRouteImport.update({
  id: '/topics/colours',
  path: '/topics/colours',
  getParentRoute: () => rootRouteImport,
} as any)
const ListsVerbsRoute = ListsVerbsRouteImport.update({
  id: '/lists/verbs',
  path: '/lists/verbs',
  getParentRoute: () => rootRouteImport,
} as any)
const ListsCasesRoute = ListsCasesRouteImport.update({
  id: '/lists/cases',
  path: '/lists/cases',
  getParentRoute: () => rootRouteImport,
} as any)
const GamesSportsRoute = GamesSportsRouteImport.update({
  id: '/sports',
  path: '/sports',
  getParentRoute: () => GamesRouteRoute,
} as any)
const GamesNumbersRoute = GamesNumbersRouteImport.update({
  id: '/numbers',
  path: '/numbers',
  getParentRoute: () => GamesRouteRoute,
} as any)
const GamesColoursRoute = GamesColoursRouteImport.update({
  id: '/colours',
  path: '/colours',
  getParentRoute: () => GamesRouteRoute,
} as any)
const GamesAdjectivesRoute = GamesAdjectivesRouteImport.update({
  id: '/adjectives',
  path: '/adjectives',
  getParentRoute: () => GamesRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/games': typeof GamesRouteRouteWithChildren
  '/games/adjectives': typeof GamesAdjectivesRoute
  '/games/colours': typeof GamesColoursRoute
  '/games/numbers': typeof GamesNumbersRoute
  '/games/sports': typeof GamesSportsRoute
  '/lists/cases': typeof ListsCasesRoute
  '/lists/verbs': typeof ListsVerbsRoute
  '/topics/colours': typeof TopicsColoursRoute
  '/topics/sports': typeof TopicsSportsRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/games': typeof GamesRouteRouteWithChildren
  '/games/adjectives': typeof GamesAdjectivesRoute
  '/games/colours': typeof GamesColoursRoute
  '/games/numbers': typeof GamesNumbersRoute
  '/games/sports': typeof GamesSportsRoute
  '/lists/cases': typeof ListsCasesRoute
  '/lists/verbs': typeof ListsVerbsRoute
  '/topics/colours': typeof TopicsColoursRoute
  '/topics/sports': typeof TopicsSportsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/games': typeof GamesRouteRouteWithChildren
  '/games/adjectives': typeof GamesAdjectivesRoute
  '/games/colours': typeof GamesColoursRoute
  '/games/numbers': typeof GamesNumbersRoute
  '/games/sports': typeof GamesSportsRoute
  '/lists/cases': typeof ListsCasesRoute
  '/lists/verbs': typeof ListsVerbsRoute
  '/topics/colours': typeof TopicsColoursRoute
  '/topics/sports': typeof TopicsSportsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/games'
    | '/games/adjectives'
    | '/games/colours'
    | '/games/numbers'
    | '/games/sports'
    | '/lists/cases'
    | '/lists/verbs'
    | '/topics/colours'
    | '/topics/sports'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/games'
    | '/games/adjectives'
    | '/games/colours'
    | '/games/numbers'
    | '/games/sports'
    | '/lists/cases'
    | '/lists/verbs'
    | '/topics/colours'
    | '/topics/sports'
  id:
    | '__root__'
    | '/'
    | '/games'
    | '/games/adjectives'
    | '/games/colours'
    | '/games/numbers'
    | '/games/sports'
    | '/lists/cases'
    | '/lists/verbs'
    | '/topics/colours'
    | '/topics/sports'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  GamesRouteRoute: typeof GamesRouteRouteWithChildren
  ListsCasesRoute: typeof ListsCasesRoute
  ListsVerbsRoute: typeof ListsVerbsRoute
  TopicsColoursRoute: typeof TopicsColoursRoute
  TopicsSportsRoute: typeof TopicsSportsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/games': {
      id: '/games'
      path: '/games'
      fullPath: '/games'
      preLoaderRoute: typeof GamesRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/topics/sports': {
      id: '/topics/sports'
      path: '/topics/sports'
      fullPath: '/topics/sports'
      preLoaderRoute: typeof TopicsSportsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/topics/colours': {
      id: '/topics/colours'
      path: '/topics/colours'
      fullPath: '/topics/colours'
      preLoaderRoute: typeof TopicsColoursRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/lists/verbs': {
      id: '/lists/verbs'
      path: '/lists/verbs'
      fullPath: '/lists/verbs'
      preLoaderRoute: typeof ListsVerbsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/lists/cases': {
      id: '/lists/cases'
      path: '/lists/cases'
      fullPath: '/lists/cases'
      preLoaderRoute: typeof ListsCasesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/games/sports': {
      id: '/games/sports'
      path: '/sports'
      fullPath: '/games/sports'
      preLoaderRoute: typeof GamesSportsRouteImport
      parentRoute: typeof GamesRouteRoute
    }
    '/games/numbers': {
      id: '/games/numbers'
      path: '/numbers'
      fullPath: '/games/numbers'
      preLoaderRoute: typeof GamesNumbersRouteImport
      parentRoute: typeof GamesRouteRoute
    }
    '/games/colours': {
      id: '/games/colours'
      path: '/colours'
      fullPath: '/games/colours'
      preLoaderRoute: typeof GamesColoursRouteImport
      parentRoute: typeof GamesRouteRoute
    }
    '/games/adjectives': {
      id: '/games/adjectives'
      path: '/adjectives'
      fullPath: '/games/adjectives'
      preLoaderRoute: typeof GamesAdjectivesRouteImport
      parentRoute: typeof GamesRouteRoute
    }
  }
}

interface GamesRouteRouteChildren {
  GamesAdjectivesRoute: typeof GamesAdjectivesRoute
  GamesColoursRoute: typeof GamesColoursRoute
  GamesNumbersRoute: typeof GamesNumbersRoute
  GamesSportsRoute: typeof GamesSportsRoute
}

const GamesRouteRouteChildren: GamesRouteRouteChildren = {
  GamesAdjectivesRoute: GamesAdjectivesRoute,
  GamesColoursRoute: GamesColoursRoute,
  GamesNumbersRoute: GamesNumbersRoute,
  GamesSportsRoute: GamesSportsRoute,
}

const GamesRouteRouteWithChildren = GamesRouteRoute._addFileChildren(
  GamesRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  GamesRouteRoute: GamesRouteRouteWithChildren,
  ListsCasesRoute: ListsCasesRoute,
  ListsVerbsRoute: ListsVerbsRoute,
  TopicsColoursRoute: TopicsColoursRoute,
  TopicsSportsRoute: TopicsSportsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
